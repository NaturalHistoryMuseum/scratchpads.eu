<?php

function arduino_menu(){
  $items['admin/config/content/arduino'] = array(
    'title' => 'Arduino',
    'page callback' => 'arduino_devices',
    'access arguments' => array(
      'administer arduino devices'
    ),
    'description' => t('Administer Arduino devices'),
    'access callback' => 'user_access',
    'type' => MENU_NORMAL_ITEM
  );
  $items['admin/config/content/arduino/devices'] = array(
    'title' => 'Arduino',
    'page callback' => 'arduino_devices',
    'access arguments' => array(
      'administer arduino devices'
    ),
    'description' => t('Administer Arduino devices'),
    'access callback' => 'user_access',
    'type' => MENU_DEFAULT_LOCAL_TASK
  );
  $items['admin/config/content/arduino/devices/add'] = array(
    'title' => 'Arduino',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('arduino_devices_add'),
    'access arguments' => array(
      'administer arduino devices'
    ),
    'description' => t('Administer Arduino devices'),
    'access callback' => 'user_access',
    'type' => MENU_NORMAL_ITEM
  );
  $items['admin/config/content/arduino/devices/get-code/%'] = array(
    'title' => 'Arduino',
    'page callback' => 'arduino_get_code',
    'access arguments' => array(
      'administer arduino devices'
    ),
    'description' => t('Administer Arduino devices'),
    'access callback' => 'user_access',
    'type' => MENU_NORMAL_ITEM
  );
  $items['arduino/post'] = array(
    'title' => 'Arduino',
    'page callback' => 'arduino_post',
    'access arguments' => array(
      'administer arduino devices'
    ),
    'description' => t('Post data from Arduino'),
    'access callback' => true,
    'type' => MENU_NORMAL_ITEM
  );
  return $items;
}

function arduino_devices(){
  $output ="<h2>Arduino devices</h2>";
	//TODO: List devices
	$sql = "SELECT * FROM {arduino_device}";
	$result = db_query($sql, array());
	$output .= '<table>';
	$output .= '<thead>';
	$output .= '<tr><td><b>Device Name</b></td><td><b>Token</b></td><td><b>Content Type</b></td><td><b>User ID</b></td><tr>';
	$output .= '</thead>';
	//TODO: table header
	while ($row = $result->fetchObject()){
		$output .= '<tr><td>'.$row->device_name.'</td><td>'.$row->token.'</td><td>'.$row->node_type.'</td><td>'.$row->uid.'</td></tr>';
	}
    $output .= '</table>';
	
	return $output;
}

function arduino_devices_add(){
  $form['name'] = array(
    '#title' => t('Device name'),
    '#type' => 'textfield',
    '#description' => t('The name for this device (e.g. Weather station 002')
  );
  $form['content_type'] = array(
    '#title' => t('Content type to map to'),
    '#type' => 'select',
    '#options' => node_type_get_names(),
    '#description' => t('What content type should the results be saved to?'),
  );
  $form['user'] = array(
    '#title' => t('Username for this device'),
    '#type' => 'textfield',
    '#description' => t('Posts from the devcie will be made under this username.'),
  );
  
  
  $form['submit'] = array(
    '#value' => 'Save',
    '#type' => 'submit'
  );

  $form['#submit'][] = 'arduino_devices_add_submit';
  return $form;
}

function arduino_devices_add_submit($form, $form_state) {
  $name      = $form_state['values']['name'];
  $node_type = $form_state['values']['content_type'];
  $user_name = $form_state['values']['user'];
   
  //Generate token
  $token = crypt($name . $node_type . $user_name);
  drupal_set_message("Token: ".$token, 'status');
  
  //Get uid
  $uid = 2;
  
  //Save device 
  $sql = "INSERT INTO {arduino_device} (device_name, token, node_type, uid) VALUES (:name, :token, :node_type, :uid);";
  db_query($sql, array(':name' => $name, ':token' => $token, ':node_type' => $node_type, ':uid' => $uid));
}

function arduino_get_code(){
  global $_SERVER;
  $output = '<h2>Get code</h2>';
	//TODO: PAss name as argument
  
  //Get device details
  $device_name = arg(6); 
  $sql = "SELECT * FROM {arduino_device} WHERE device_name = :name";
  $result = db_query($sql, array(':name' => $device_name))->fetchObject();
  //If we can't find the device say so and quit
  if (!is_object($result)) {
  	$output .= "No matching device.";
  	return $output;
  }
  
  //Show some details
  foreach ($result as $key => $value){
  	$output .=  '<strong>' . $key . '</strong>: ' . $value . '<br/>';
  }
  $output .= '<br/><br/>';
  
  //Let's get a list of fields
  $node_info = field_info_instances('node', $result->node_type);
  $field_info = array();
  foreach ($node_info as $name => $data) {
  	//Check we're dealing with a field
  	if (isset($data['field_name'])) {
  	  if (isset($data['settings']['min'])) {
  	  	$field_info[$data['field_name']]['min'] = $data['settings']['min'];
  	  }
  	if (isset($data['settings']['max'])) {
  	  	$field_info[$data['field_name']]['max'] = $data['settings']['max'];
  	  }
  	  $field_info[$data['field_name']]['type'] =  $data['display']['default']['type'];
  	}
  }
  unset($node_info);
  //Dispaly for debugging
  foreach ($field_info as $name => $data) {
  	$output .= '<strong>' . $name .'</strong>: ' . $data['type'] . '<br/>';
  }
  
  //Process these fields
  $field_types = array();
  foreach ($field_info as $name => $data) {
  	switch ($data['type']){
  		case 'number_integer':
  			$c_type = "long";
  			$min = -2147483468;
  			$max =  2147483467;
  			if (isset($data['min']) && $data['min'] != ''){
  			  $min = $data['min'];
  			}
  	        if (isset($data['max']) && $data['max'] != ''){
  			  $max = $data['max'];
  			}
  			
  			if ($min >= 0 && $max > 2147483467) {
  			  $c_type = "unsigned long";	
  			}
  			if ($min >= 0 && $max <= 65535) {
  			  $c_type = "unsigned int";
  			}
  			if ($min >= -32768 && $max <= 32767) {
  			  $c_type = "int";
  			}
  			if ($min >= 0 && $max <= 255) {
  			  $c_type = "unsigned char";
  			}
  			if ($min >= -128 && $max <= 127) {
  			  $c_type = "char";
  			}
  			$field_info[$name]['c_type'] = $c_type;
  	        if (!isset($field_types[$c_type])){
  				$field_types[] = $c_type;
  			}
  			break;
  		case 'number_decimal':
  			$c_type = "double";
  			//In gneral Arduinos long and oduble are both 4 bytes
  			//TODO: Arduino Due double is 8bytes
  			$field_info[$name]['c_type'] = $c_type;
  	        if (!isset($field_types[$c_type])){
  				$field_types[$c_type] = 1;
  			}
  			break;
  		case 'text_default':
  			$output .= $name . ' is a text_default<br/>';
  			break;
  	}
  }
   $output .= '<br/><br/><br/><br/>';
   $output .= '<h2>'.$result->device_name.'_struct.h</h2>';
   $output .= "#ifndef ".$result->device_name."_struct_h<br/>";
   $output .= "#define ".$result->device_name."_struct_h<br/>";
   $output .= "typedef struct {<br/>";
   foreach ($field_info as $name => $data){
   	if (isset($data['c_type'])){
   	  $output .= "&nbsp;&nbsp;".$data['c_type'] . " " . $name .";<br/>";
   	}
   }
   
   $output .= "} ".$result->device_name ."Post_t;<br/>";
   $output .= '#endif<br/>';
   $output .= '#define DRUPAL_API_KEY_' . strtoupper($result->device_name) . " " . '"' . $result->token . '"<br/>';
   $output .= '#define DRUPAL_SITE_' . strtoupper($result->device_name) . " " . '"' . $_SERVER['HTTP_HOST'] . '"<br/>';
   $output .= '#define DRUPAL_URI_' . strtoupper($result->device_name) . " " . '"' . base_path() . '"<br/>';
   $output .= '<br/><br/><br/><br/>';
   
   $output .= '<h2>//Main application - variable setup</h2>';
   $output .= "#include &lt;SPI.h&gt;<br/>";
   $output .= "#include &lt;Ethernet.h&gt;<br/>";
   $output .= '#include &lt;utility/w5100.h&ht;<br/>';
   $output .= '#include "' . $result->device_name . '_struct.h"<br/>';
   $output .= "<br/>";
   $output .= "byte mac[] = { 0x00, 0xAA, 0xBB, 0xCC, 0xDE, 0x02 };<br/>";
   $output .= "IPAddress ip(192,168,1, 177);<br/>";
   $output .= "<br/>";
   //TODO: IP ADDRESS SHOULD BE IN STRUCT FOR DEVICE
   $output .= "IPAddress server(" . str_replace('.', ', ', $_SERVER['SERVER_ADDR']) . ");<br/>";
   $output .= "<br/>";
   $output .= "EthernetClient client;<br/>";   
   $output .= 'String data;<br/>';
   //Insert tmp for float to string conversion if needed
   if (isset($field_types['double'])){
   	 $output .= 'char tmp[10];<br/>';
   }
   $output .= '<br/><br/><br/><br/>';
   
   $output .= '<h2>//Main application - setup()</h2>';
   $output .= 'void setup() {<br/>';
   $output .= '  Serial.begin(9600);<br/>';
   $output .= '  if (Ethernet.begin(mac) == 0) {<br/>';
   $output .= '    Serial.println("Failed to configure Ethernet using DHCP");<br/>';
   $output .= '    // DHCP failed, so use a fixed IP address:<br/>';
   $output .= '    Ethernet.begin(mac, ip);<br/>';
   $output .= '  }<br/>';
   $output .= '  Serial.println("connecting...");<br/>';
   $output .= '  W5100.setRetransmissionTime(0x2710);<br/>';
   $output .= '  W5100.setRetransmissionCount(3);<br/>';
   $output .= '}<br/>';
   $output .= '<br/><br/><br/><br/>';
   
   $output .= '<h2>//Main application - loop()</h2>';
   $output .= 'void loop() {<br/>';
   $output .= '  //Test/debugging code<br/>';
   $output .= '  '.$result->device_name.'Post_t holder;<br/>';
   foreach ($field_info as $name => $data){
   	if (!isset($data['max']) || $data['max'] == $data['min']) {
   	  $data['max'] = 128;
   	}
     if (isset($data['c_type'])){ 
         $output .= '  holder.'.$name.' = millis() % '.$data['max'].';<br/>';
       }
   }
   $output .= '  drupal_post_'.$result->device_name.'(holder);<br/>';
   $output .= '  delay(2000);<br/>';
   $output .= '}<br/>';
  
   $output .= '<br/><br/><br/><br/>';
   
   $output .= '<h2>//Main application - new functions</h2>';
   $output .= 'void drupal_post_'.$result->device_name.'('.$result->device_name.'Post_t '.$result->device_name.'Post) {<br/>';
   $output .= '  data = "";<br/>';
   $output .= '  data += "token=";<br/>';
   $output .= '  data += DRUPAL_API_KEY_'.strtoupper($result->device_name).';<br/>';
   $output .= '  data += "&millis=";<br/>';
   $output .= '  data += millis();<br/>';
   $output .= '  data += "&rtc=";<br/>';
   $output .= '  data += "&mac=";<br/>';
   $output .= '  data += "&localip=";<br/>';
   $output .= '  data += Ethernet.localIP();<br/>';
   
   foreach ($field_info as $name => $data) {
   	if (isset($data['c_type'])){ 
      switch ($data['c_type']) {
      	case 'double':
      	  $output .= '  dtostrf('.$result->device_name.'Post.'.$name.',1,2,tmp);<br/>';
      	  $output .= '  data += "&'.$name.'=";<br/>';
      	  $output .= '  data += tmp;<br/>';
      	  break;
      	default:
          $output .= '  data += "&'.$name.'=";<br/>';
          $output .= '  data += '.$result->device_name.'Post.'.$name.';<br/>';
      }
   	}
   }
  
   
  $output  .= '//Code to post to the web server<br/>';
  $output  .= '  <br/>';
  $output  .= '   if (client.connect(server, 80)) {<br/>';
  $output  .= '    Serial.println("connecting to server");<br/>';
  $output  .= '    // send the HTTP PUT request:<br/>';
  $output  .= '    client.print("GET ");<br/>';
  $output  .= '    client.print(DRUPAL_URI_'.strtoupper($result->device_name).');<br/>';
  $output  .= '    client.print("?q=arduino/post&");<br/>';
  $output  .= '    client.print(data);<br/>';
  $output  .= '    client.println(" HTTP/1.1");<br/>';
  $output  .= '    client.print("Host: ");<br/>';
  $output  .= '    client.println(DRUPAL_SITE_'.strtoupper($result->device_name).');<br/>';
  $output  .= '    client.println("User-Agent: arduino-ethernet");<br/>';
  $output  .= '    client.println("Connection: close");<br/>';
  $output  .= '    client.println();<br/>';
  $output  .= '    client.stop();<br/>';
    
  $output  .= '    //Code to putput HTTP request to Serial for debugging.<br/>';
  $output  .= '    Serial.print("GET ");<br/>';
  $output  .= '    Serial.print(DRUPAL_URI_'.strtoupper($result->device_name).');<br/>';
  $output  .= '    Serial.print("?q=arduino/post&");<br/>';
  $output  .= '    Serial.print(data);<br/>';
  $output  .= '    Serial.println(" HTTP/1.1");<br/>';
  $output  .= '    Serial.print("Host: ");<br/>';
  $output  .= '    Serial.println(DRUPAL_SITE_'.strtoupper($result->device_name).');<br/>';
  $output  .= '    Serial.println("User-Agent: arduino-ethernet");<br/>';
  $output  .= '    Serial.println("Connection: close");<br/>';
  $output  .= '    Serial.println();<br/>';
  $output  .= '<br/>';
  $output  .= '<br/>';
  $output  .= '  } <br/>';
  $output  .= '  else {<br/>';
  $output  .= '    // if you couldn\'t make a connection:<br/>';
  $output  .= '   Serial.println("connection failed");<br/>';
  $output  .= '    Serial.println("disconnecting.");<br/>';
  $output  .= '    client.stop();<br/>';
  $output  .= '  }<br/>';
  $output .= '}';
   
  
  return str_replace(' ', '&nbsp;', $output);
}

function arduino_post(){
  global $_POST;
  global $_GET;
  //Get POST variables
  if (isset($_POST['token'])){
  	$token = $_POST['token'];
  } else if (isset($_GET['token'])) {
  	$token = $_GET['token'];
  } else {
  	$token = NULL;
  }
  
  
  //Verify token
  $sql = "SELECT * FROM {arduino_device} WHERE token = :token";
  $result = db_query($sql, array(':token' => $token));
  
  $data = $result->fetchAssoc();
  
  //Create node object
  $node = new stdClass();
  $node->title = "Title String";
  $node->type = $data['node_type'];
  node_object_prepare($node);
  $node->language = LANGUAGE_NONE;
  $node->uid = (int)$data['uid'];
  
  
  
  //Add fields    
  $node_info = field_info_instances('node', $data['node_type']);
  $field_info = array();
  foreach ($node_info as $name => $name_data) {
  	//Check we're dealing with a field
  	if (isset($name_data['field_name'])) {
  	  $field_info[$name_data['field_name']]['type'] =  $name_data['display']['default']['type'];
  	}
  }
  
  foreach ($field_info as $name => $name_data){
  	if (isset($_GET[$name])) {
  	  $array = array();
  	  switch ($name_data['type']) {
  	  	case 'number_integer':
  	  	  $node->$name = array('und' => array('0' => array('value' => (int)$_GET[$name])));
  	  	  break;
  	  	default:
          $node->$name = array('und' => array('0' => array('value' => $_GET[$name])));
  	  }
  	}
  }
  //Save object
  
    $node = node_submit($node);
  node_save($node);
  
  //return OK 200
  
	
	
  //Debug

  global $_GET;
  
  print '<h2>POST</h2><PRE>';
  print_r($_POST);
  print '</PRE><h2>GET</h2><PRE>';
  print_r($_GET);
  print '</PRE>';

  
  watchdog('Arduino Post', serialize($_POST), NULL, WATCHDOG_ALERT, NULL);
    exit;
}